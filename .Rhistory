sd_obs <- sqrt(rchisq(ns, npt-1) / (npt-1) * sig2_true)
df[[i.sim]] <- data.frame(ids=ids, iarm=iarm-1, npt=npt, y=y_obs, sd=sd_obs, x=x_obs)
}
df
}
df <- gen_data(1)
df <- df[[1]]
head(df)
groupinfo <- list(c(0), c(2))
x <- dff[,6:ncol(dff)]
dff <- df
x <- dff[,6:ncol(dff)]
nu.i <- Inf
n.sim <- 1
iarm <- c(4, 1, 1, 2, 1, 2, 3, 1, 2, 3, 1, 4, 1, 2, 4, 3, 3, 4, 2, 1, 1, 3, 4, 4, 2, 3, 1, 2, 3, 3, 1, 2, 3, 1, 2, 4, 3, 1, 3, 1, 2, 4, 3, 2, 1, 2, 3, 4, 2, 1, 3, 4, 1, 2, 4, 3, 1, 2, 3, 4, 1, 2, 2, 1, 3, 4, 2, 1, 4, 3, 1, 4, 3, 2, 1, 2, 4, 3, 1, 4, 2, 3, 1, 3, 4, 2, 1, 4, 2, 3)
K<-30 # number of trials
nx<-5 # number of X covariates
nT<-4 # number of treatments
nz<-2 # number of Z covariates
ns <- length(iarm)
beta1 <- -0.06
beta2 <- 1.40
beta3 <- 1.83
beta4 <- 0.11
beta5 <- -0.81
beta_true <- sapply(1:nx, function(i) get(paste0("beta",i)))
gamma0 <- 1.03
gamma1 <- -18.88
gamma2 <- -24.53
gamma3 <- -11.70
gamma_true <- sapply(0:3, function(i) get(paste0("gamma",i)))
phi1 <- 1.38
phi2 <- -1.5
phi_true <- sapply(1:nz, function(i) get(paste0("phi",i)))
sig2_true <- c(466.1473, 511.7338, 526.3354, 507.3499, 483.4849, 500.0848, 495.0967, 501.6139, 499.3711, 494.2514, 495.7723, 487.4805, 536.9528, 500.8180, 499.0631, 491.0707, 492.0314, 482.5465, 499.2307, 510.3862, 496.7942, 495.3859, 516.0509, 502.5090, 481.5655, 498.8903, 480.1525, 491.4634, 514.5342, 523.2370, 522.0499, 508.1462, 490.3086, 491.4055, 478.9406, 517.3568, 507.5164, 514.0679, 501.5336, 508.1414, 498.8339, 514.9113, 531.5832, 501.8245, 513.5115, 480.7148, 487.4914, 492.4907, 523.9899, 519.8265, 510.4271, 494.2532, 503.7576, 514.7758, 539.7980, 466.6760, 512.9766, 514.1422, 487.7189, 500.9412, 518.1027, 497.7408, 469.0149, 495.2718, 493.8431, 486.2585, 503.5453, 488.9211, 510.7706, 504.0613, 486.6380, 497.6792, 496.6092, 491.2925, 507.2591, 504.4263, 487.7710, 515.2996, 517.2638, 509.2597, 492.7173, 512.9699, 479.5091, 504.8858, 499.7106, 529.4691, 497.5945, 515.6348, 499.8032, 499.2241)
sig2_true <- sig2_true - 100
nu.grid <- c(3,10,Inf)
beta_save <- array(0, dim=c(length(nu.grid)+1,length(beta_true)+length(gamma_true),n.sim))
betasd_save <- array(0, dim=c(length(nu.grid)+1,length(beta_true)+length(gamma_true),n.sim))
beta_coverage <- matrix(0, length(nu.grid)+1, length(beta_true)+length(gamma_true))
phi_save <- array(0, dim=c(length(nu.grid), length(phi_true),n.sim))
phisd_save <- array(0, dim=c(length(nu.grid), length(phi_true),n.sim))
phi_coverage <- matrix(0, length(nu.grid), length(phi_true))
DIC_save <- matrix(0,length(nu.grid)+1,n.sim)
phi_sv_save <- numeric(n.sim)
phisd_sv_save <- numeric(n.sim)
Rho <- matrix(1, nT, nT)
Rho[upper.tri(Rho)] <- 0.7
Rho[lower.tri(Rho)] <- 0.7
half_d <- length(which(lower.tri(Rho)))
Rho_true <- Rho[lower.tri(Rho)]
Rho_coverage <- matrix(0, length(nu.grid)+1, half_d)
init_final <- list(beta = c(beta_true, gamma_true), phi = phi_true, sig2 = sig2_true)
pb <- txtProgressBar(style=3)
idx <- length(nu.grid)+1
for (i.sim in 1:n.sim) {
dff <- df[[i.sim]]
# groupinfo <- list(c(1,2), c(2,3), c(3), c(1,4))
groupinfo <- list(c(0), c(2))
x <- dff[,6:ncol(dff)]
for (i in 1:length(nu.grid)) {
nu.i <- nu.grid[i]
out <- bayesnmr(dff$y, dff$sd, x, dff$ids, dff$iarm, dff$npt, groupinfo, prior = list(c01=1.0e05, c02=4, nu=nu.i), mcmc=list(ndiscard=2500,nskip=1,nkeep=10000), init = init_final)
beta.est <- rowMeans(out$mcmc.draws$beta)
beta_save[i,,i.sim] <- beta.est
betasd_save[i,,i.sim] <- apply(out$mcmc.draws$beta, 1, sd)
phi.est <- rowMeans(out$mcmc.draws$phi)
phi_save[i,,i.sim] <- phi.est
phisd_save[i,,i.sim] <- apply(out$mcmc.draws$phi, 1, sd)
g <- gof(out)
DIC_save[i,i.sim] <- g$DIC
h <- hpd(out)
beta_lower <- h$beta.hpd[,1]
beta_upper <- h$beta.hpd[,2]
phi_lower <- h$phi.hpd[,1]
phi_upper <- h$phi.hpd[,2]
Rho_lower <- h$Rho.hpd[,1]
Rho_upper <- h$Rho.hpd[,2]
beta_coverage[i,] <- beta_coverage[i,] + (c(beta_true, gamma_true) < beta_upper & c(beta_true, gamma_true) > beta_lower)
phi_coverage[i,] <- phi_coverage[i,] + (phi_true < phi_upper & phi_true > phi_lower)
Rho_coverage[i,] <- Rho_coverage[i,] + (Rho_true < Rho_upper & Rho_true > Rho_lower)
}
out <- bayesnmr(dff$y, dff$sd, x, dff$ids, dff$iarm, dff$npt, list(c(0:3)), prior = list(c01=1.0e05, c02=4, nu=3), mcmc=list(ndiscard=2500,nskip=1,nkeep=10000), init = list(beta = c(beta_true, gamma_true), sig2 = sig2_true))
beta.est <- rowMeans(out$mcmc.draws$beta)
beta_save[idx,,i.sim] <- beta.est
betasd_save[idx,,i.sim] <- apply(out$mcmc.draws$beta, 1, sd)
phi.est <- rowMeans(out$mcmc.draws$phi)
phi_sv_save[i.sim] <- phi.est
phisd_sv_save[i.sim] <- apply(out$mcmc.draws$phi, 1, sd)
g <- gof(out)
DIC_save[idx,i.sim] <- g$DIC
h <- hpd(out)
beta_lower <- h$beta.hpd[,1]
beta_upper <- h$beta.hpd[,2]
phi_lower <- h$phi.hpd[,1]
phi_upper <- h$phi.hpd[,2]
Rho_lower <- h$Rho.hpd[,1]
Rho_upper <- h$Rho.hpd[,2]
beta_coverage[idx,] <- beta_coverage[idx,] + (c(beta_true, gamma_true) < beta_upper & c(beta_true, gamma_true) > beta_lower)
Rho_coverage[idx,] <- Rho_coverage[idx,] + (Rho_true < Rho_upper & Rho_true > Rho_lower)
setTxtProgressBar(pb, i.sim / n.sim)
}
close(pb)
pb <- txtProgressBar(style=3)
idx <- length(nu.grid)+1
for (i.sim in 1:n.sim) {
# dff <- df[[i.sim]]
# groupinfo <- list(c(1,2), c(2,3), c(3), c(1,4))
groupinfo <- list(c(0), c(2))
x <- dff[,6:ncol(dff)]
for (i in 1:length(nu.grid)) {
nu.i <- nu.grid[i]
out <- bayesnmr(dff$y, dff$sd, x, dff$ids, dff$iarm, dff$npt, groupinfo, prior = list(c01=1.0e05, c02=4, nu=nu.i), mcmc=list(ndiscard=2500,nskip=1,nkeep=10000), init = init_final)
beta.est <- rowMeans(out$mcmc.draws$beta)
beta_save[i,,i.sim] <- beta.est
betasd_save[i,,i.sim] <- apply(out$mcmc.draws$beta, 1, sd)
phi.est <- rowMeans(out$mcmc.draws$phi)
phi_save[i,,i.sim] <- phi.est
phisd_save[i,,i.sim] <- apply(out$mcmc.draws$phi, 1, sd)
g <- gof(out)
DIC_save[i,i.sim] <- g$DIC
h <- hpd(out)
beta_lower <- h$beta.hpd[,1]
beta_upper <- h$beta.hpd[,2]
phi_lower <- h$phi.hpd[,1]
phi_upper <- h$phi.hpd[,2]
Rho_lower <- h$Rho.hpd[,1]
Rho_upper <- h$Rho.hpd[,2]
beta_coverage[i,] <- beta_coverage[i,] + (c(beta_true, gamma_true) < beta_upper & c(beta_true, gamma_true) > beta_lower)
phi_coverage[i,] <- phi_coverage[i,] + (phi_true < phi_upper & phi_true > phi_lower)
Rho_coverage[i,] <- Rho_coverage[i,] + (Rho_true < Rho_upper & Rho_true > Rho_lower)
}
out <- bayesnmr(dff$y, dff$sd, x, dff$ids, dff$iarm, dff$npt, list(c(0:3)), prior = list(c01=1.0e05, c02=4, nu=3), mcmc=list(ndiscard=2500,nskip=1,nkeep=10000), init = list(beta = c(beta_true, gamma_true), sig2 = sig2_true))
beta.est <- rowMeans(out$mcmc.draws$beta)
beta_save[idx,,i.sim] <- beta.est
betasd_save[idx,,i.sim] <- apply(out$mcmc.draws$beta, 1, sd)
phi.est <- rowMeans(out$mcmc.draws$phi)
phi_sv_save[i.sim] <- phi.est
phisd_sv_save[i.sim] <- apply(out$mcmc.draws$phi, 1, sd)
g <- gof(out)
DIC_save[idx,i.sim] <- g$DIC
h <- hpd(out)
beta_lower <- h$beta.hpd[,1]
beta_upper <- h$beta.hpd[,2]
phi_lower <- h$phi.hpd[,1]
phi_upper <- h$phi.hpd[,2]
Rho_lower <- h$Rho.hpd[,1]
Rho_upper <- h$Rho.hpd[,2]
beta_coverage[idx,] <- beta_coverage[idx,] + (c(beta_true, gamma_true) < beta_upper & c(beta_true, gamma_true) > beta_lower)
Rho_coverage[idx,] <- Rho_coverage[idx,] + (Rho_true < Rho_upper & Rho_true > Rho_lower)
setTxtProgressBar(pb, i.sim / n.sim)
}
close(pb)
dff
dff <- df
dff
pb <- txtProgressBar(style=3)
idx <- length(nu.grid)+1
for (i.sim in 1:n.sim) {
# dff <- df[[i.sim]]
# groupinfo <- list(c(1,2), c(2,3), c(3), c(1,4))
groupinfo <- list(c(0), c(2))
x <- dff[,6:ncol(dff)]
for (i in 1:length(nu.grid)) {
nu.i <- nu.grid[i]
out <- bayesnmr(dff$y, dff$sd, x, dff$ids, dff$iarm, dff$npt, groupinfo, prior = list(c01=1.0e05, c02=4, nu=nu.i), mcmc=list(ndiscard=2500,nskip=1,nkeep=10000), init = init_final)
beta.est <- rowMeans(out$mcmc.draws$beta)
beta_save[i,,i.sim] <- beta.est
betasd_save[i,,i.sim] <- apply(out$mcmc.draws$beta, 1, sd)
phi.est <- rowMeans(out$mcmc.draws$phi)
phi_save[i,,i.sim] <- phi.est
phisd_save[i,,i.sim] <- apply(out$mcmc.draws$phi, 1, sd)
g <- gof(out)
DIC_save[i,i.sim] <- g$DIC
h <- hpd(out)
beta_lower <- h$beta.hpd[,1]
beta_upper <- h$beta.hpd[,2]
phi_lower <- h$phi.hpd[,1]
phi_upper <- h$phi.hpd[,2]
Rho_lower <- h$Rho.hpd[,1]
Rho_upper <- h$Rho.hpd[,2]
beta_coverage[i,] <- beta_coverage[i,] + (c(beta_true, gamma_true) < beta_upper & c(beta_true, gamma_true) > beta_lower)
phi_coverage[i,] <- phi_coverage[i,] + (phi_true < phi_upper & phi_true > phi_lower)
Rho_coverage[i,] <- Rho_coverage[i,] + (Rho_true < Rho_upper & Rho_true > Rho_lower)
}
out <- bayesnmr(dff$y, dff$sd, x, dff$ids, dff$iarm, dff$npt, list(c(0:3)), prior = list(c01=1.0e05, c02=4, nu=3), mcmc=list(ndiscard=2500,nskip=1,nkeep=10000), init = list(beta = c(beta_true, gamma_true), sig2 = sig2_true))
beta.est <- rowMeans(out$mcmc.draws$beta)
beta_save[idx,,i.sim] <- beta.est
betasd_save[idx,,i.sim] <- apply(out$mcmc.draws$beta, 1, sd)
phi.est <- rowMeans(out$mcmc.draws$phi)
phi_sv_save[i.sim] <- phi.est
phisd_sv_save[i.sim] <- apply(out$mcmc.draws$phi, 1, sd)
g <- gof(out)
DIC_save[idx,i.sim] <- g$DIC
h <- hpd(out)
beta_lower <- h$beta.hpd[,1]
beta_upper <- h$beta.hpd[,2]
phi_lower <- h$phi.hpd[,1]
phi_upper <- h$phi.hpd[,2]
Rho_lower <- h$Rho.hpd[,1]
Rho_upper <- h$Rho.hpd[,2]
beta_coverage[idx,] <- beta_coverage[idx,] + (c(beta_true, gamma_true) < beta_upper & c(beta_true, gamma_true) > beta_lower)
Rho_coverage[idx,] <- Rho_coverage[idx,] + (Rho_true < Rho_upper & Rho_true > Rho_lower)
setTxtProgressBar(pb, i.sim / n.sim)
}
close(pb)
DIC_save
rm(list=ls())
require(Rcpp)
require(RcppArmadillo)
require(RcppProgress)
require(coda)
require(mvnfast)
require(BayesMeta)
gen_data <- function(n.sim, nu, seednumber=20200328) {
set.seed(seednumber)
K=30 # number of trials
nx=5 # number of X covariates
nT=4 # number of treatments
nz=2 # number of Z covariates
npt <- c(1000, 545, 1200, 353, 632, 205, 374, 204 , 367, 263, 621, 274, 248, 451, 246, 502, 146, 612, 148, 604, 927, 923, 1428, 1427, 718, 480, 843, 220, 716, 422, 222, 248, 342, 255, 649, 437, 123, 124, 721, 470, 354, 348, 357, 375, 132, 127, 257, 139, 267, 165, 207, 481, 493, 432, 428, 231, 230, 127, 255, 78, 155, 164, 187, 435, 531, 528, 536, 267, 516, 290, 555, 383, 358, 485, 493, 467, 508, 495, 492, 550, 543, 555, 456, 521, 475, 501, 486, 467, 484, 471)
sig2_true <- c(466.1473, 511.7338, 526.3354, 507.3499, 483.4849, 500.0848, 495.0967, 501.6139, 499.3711, 494.2514, 495.7723, 487.4805, 536.9528, 500.8180, 499.0631, 491.0707, 492.0314, 482.5465, 499.2307, 510.3862, 496.7942, 495.3859, 516.0509, 502.5090, 481.5655, 498.8903, 480.1525, 491.4634, 514.5342, 523.2370, 522.0499, 508.1462, 490.3086, 491.4055, 478.9406, 517.3568, 507.5164, 514.0679, 501.5336, 508.1414, 498.8339, 514.9113, 531.5832, 501.8245, 513.5115, 480.7148, 487.4914, 492.4907, 523.9899, 519.8265, 510.4271, 494.2532, 503.7576, 514.7758, 539.7980, 466.6760, 512.9766, 514.1422, 487.7189, 500.9412, 518.1027, 497.7408, 469.0149, 495.2718, 493.8431, 486.2585, 503.5453, 488.9211, 510.7706, 504.0613, 486.6380, 497.6792, 496.6092, 491.2925, 507.2591, 504.4263, 487.7710, 515.2996, 517.2638, 509.2597, 492.7173, 512.9699, 479.5091, 504.8858, 499.7106, 529.4691, 497.5945, 515.6348, 499.8032, 499.2241)
sig2_true <- sig2_true - 100
beta1 <- -0.06
beta2 <- 1.40
beta3 <- 1.83
beta4 <- 0.11
beta5 <- -0.81
beta_true <- sapply(1:nx, function(i) get(paste0("beta",i)))
gamma0 <- 1.03
gamma1 <- -18.88
gamma2 <- -24.53
gamma3 <- -11.70
gamma_true <- sapply(0:3, function(i) get(paste0("gamma",i)))
phi1 <- 1.38
phi2 <- -1.5
phi_true <- sapply(1:nz, function(i) get(paste0("phi",i)))
# phi2 <- -1.83
# phi3 <- 1.22
# phi4 <- -1.41
# phi5 <- 1.23
# phi_true <- sapply(1:(nz+1), function(i) get(paste0("phi",i)))
ids <- c(rep(1:10,each=2), rep(11:20, each=3), rep(21:30, each=4))
ns <- length(ids)
SigX_True <- matrix(0, nx, nx)
diag(SigX_True) <- 4.5
SigX_True[2,3] <- SigX_True[3,2] <- 2
SigX_True[5,4] <- SigX_True[4,5] <- -2.5
x_obs <- rmvn(ns, rep(0, nx), SigX_True)
x_obs <- scale(x_obs, center = TRUE, scale = TRUE)
Rho <- matrix(1, nT, nT)
Rho[upper.tri(Rho)] <- 0.7
Rho[lower.tri(Rho)] <- 0.7
iarm <- c(4, 1, 1, 2, 1, 2, 3, 1, 2, 3, 1, 4, 1, 2, 4, 3, 3, 4, 2, 1, 1, 3, 4, 4, 2, 3, 1, 2, 3, 3, 1, 2, 3, 1, 2, 4, 3, 1, 3, 1, 2, 4, 3, 2, 1, 2, 3, 4, 2, 1, 3, 4, 1, 2, 4, 3, 1, 2, 3, 4, 1, 2, 2, 1, 3, 4, 2, 1, 4, 3, 1, 4, 3, 2, 1, 2, 4, 3, 1, 4, 2, 3, 1, 3, 4, 2, 1, 4, 2, 3)
z_obs <- matrix(0, ns, nz)
df <- vector(mode = "list", length = n.sim)
# generate random effects
for (i in 1:ns) {
if (iarm[i] %in% c(1)) {
z_obs[i,1] <- 1
} else if (iarm[i] %in% c(3)) {
z_obs[i,2] <- 2
}
}
# for (i in 1:ns) {
#     if (iarm[i] %in% c(1,2)) {
#       z_obs[i,1]=1
#     }
#     if (iarm[i] %in% c(2,3)) {
#       z_obs[i,2]=1
#     }
#     if (iarm[i] == 3) {
#       z_obs[i,3]=1
#     }
#     if (iarm[i] %in% c(1,4)) {
#       z_obs[i,4] = 1
#     }
# }
# z_obs <- cbind(1,z_obs)
Z_obs <- drop(exp(z_obs %*% phi_true))
pb <- txtProgressBar(style=3)
for (i.sim in 1:n.sim) {
y_obs <- c()
n_arm <- 2
for (i in 1:10) {
# for narm = 2
i_trt <- iarm[(n_arm*(i-1)+1):(n_arm*i)]
Ek <- matrix(0, nT, n_arm)
for (j in 1:n_arm) {
Ek[i_trt[j], j] <- 1
}
x_trt <- x_obs[(n_arm*(i-1)+1):(n_arm*i),]
z_trt <- Z_obs[(n_arm*(i-1)+1):(n_arm*i)]
n_trt <- npt[(n_arm*(i-1)+1):(n_arm*i)]
sig_trt <- sig2_true[(n_arm*(i-1)+1):(n_arm*i)] / n_trt
lam_trt <- rgamma(1, nu/2, rate=nu/2)
xb_trt <- drop(x_trt %*% beta_true + crossprod(Ek, gamma_true))
Sig_trt <- (diag(z_trt) %*% crossprod(Ek, Rho) %*% Ek %*% diag(z_trt / lam_trt) + diag(sig_trt))
y_obs <- c(y_obs, drop(rmvn(1, xb_trt, Sig_trt)))
}
n_arm <- 3
for (i in 1:10) {
# for narm = 3
i_trt <- iarm[(n_arm*(i-1)+21):(n_arm*i+20)]
Ek <- matrix(0, nT, n_arm)
for (j in 1:n_arm) {
Ek[i_trt[j], j] <- 1
}
x_trt <- x_obs[(n_arm*(i-1)+21):(n_arm*i+20),]
z_trt <- Z_obs[(n_arm*(i-1)+21):(n_arm*i+20)]
n_trt <- npt[(n_arm*(i-1)+21):(n_arm*i+20)]
sig_trt <- sig2_true[(n_arm*(i-1)+21):(n_arm*i+20)] / n_trt
lam_trt <- rgamma(1, nu/2, rate=nu/2)
xb_trt <- drop(x_trt %*% beta_true + crossprod(Ek, gamma_true))
Sig_trt <- (diag(z_trt) %*% crossprod(Ek, Rho) %*% Ek %*% diag(z_trt / lam_trt) + diag(sig_trt))
y_obs <- c(y_obs, drop(rmvn(1, xb_trt, Sig_trt)))
}
n_arm <- 4
for (i in 1:10) {
# for narm = 4
i_trt <- iarm[(n_arm*(i-1)+51):(n_arm*i+50)]
Ek <- matrix(0, nT, n_arm)
for (j in 1:n_arm) {
Ek[i_trt[j], j] <- 1
}
x_trt <- x_obs[(n_arm*(i-1)+51):(n_arm*i+50),]
z_trt <- Z_obs[(n_arm*(i-1)+51):(n_arm*i+50)]
n_trt <- npt[(n_arm*(i-1)+51):(n_arm*i+50)]
sig_trt <- sig2_true[(n_arm*(i-1)+51):(n_arm*i+50)] / n_trt
lam_trt <- rgamma(1, nu/2, rate=nu/2)
xb_trt <- drop(x_trt %*% beta_true + crossprod(Ek, gamma_true))
Sig_trt <- (diag(z_trt) %*% crossprod(Ek, Rho) %*% Ek %*% diag(z_trt / lam_trt) + diag(sig_trt))
y_obs <- c(y_obs, drop(rmvn(1, xb_trt, Sig_trt)))
}
sd_obs <- sqrt(rchisq(ns, npt-1) / (npt-1) * sig2_true)
df[[i.sim]] <- data.frame(ids=ids, iarm=iarm-1, npt=npt, y=y_obs, sd=sd_obs, x=x_obs)
}
df
}
dff <- df[[1]]
df <- gen_data(1, 3)
dff <- df[[1]]
n.sim <- 1
iarm <- c(4, 1, 1, 2, 1, 2, 3, 1, 2, 3, 1, 4, 1, 2, 4, 3, 3, 4, 2, 1, 1, 3, 4, 4, 2, 3, 1, 2, 3, 3, 1, 2, 3, 1, 2, 4, 3, 1, 3, 1, 2, 4, 3, 2, 1, 2, 3, 4, 2, 1, 3, 4, 1, 2, 4, 3, 1, 2, 3, 4, 1, 2, 2, 1, 3, 4, 2, 1, 4, 3, 1, 4, 3, 2, 1, 2, 4, 3, 1, 4, 2, 3, 1, 3, 4, 2, 1, 4, 2, 3)
K<-30 # number of trials
nx<-5 # number of X covariates
nT<-4 # number of treatments
nz<-2 # number of Z covariates
ns <- length(iarm)
beta1 <- -0.06
beta2 <- 1.40
beta3 <- 1.83
beta4 <- 0.11
beta5 <- -0.81
beta_true <- sapply(1:nx, function(i) get(paste0("beta",i)))
gamma0 <- 1.03
gamma1 <- -18.88
gamma2 <- -24.53
gamma3 <- -11.70
gamma_true <- sapply(0:3, function(i) get(paste0("gamma",i)))
phi1 <- 1.38
phi2 <- -1.5
phi_true <- sapply(1:nz, function(i) get(paste0("phi",i)))
sig2_true <- c(466.1473, 511.7338, 526.3354, 507.3499, 483.4849, 500.0848, 495.0967, 501.6139, 499.3711, 494.2514, 495.7723, 487.4805, 536.9528, 500.8180, 499.0631, 491.0707, 492.0314, 482.5465, 499.2307, 510.3862, 496.7942, 495.3859, 516.0509, 502.5090, 481.5655, 498.8903, 480.1525, 491.4634, 514.5342, 523.2370, 522.0499, 508.1462, 490.3086, 491.4055, 478.9406, 517.3568, 507.5164, 514.0679, 501.5336, 508.1414, 498.8339, 514.9113, 531.5832, 501.8245, 513.5115, 480.7148, 487.4914, 492.4907, 523.9899, 519.8265, 510.4271, 494.2532, 503.7576, 514.7758, 539.7980, 466.6760, 512.9766, 514.1422, 487.7189, 500.9412, 518.1027, 497.7408, 469.0149, 495.2718, 493.8431, 486.2585, 503.5453, 488.9211, 510.7706, 504.0613, 486.6380, 497.6792, 496.6092, 491.2925, 507.2591, 504.4263, 487.7710, 515.2996, 517.2638, 509.2597, 492.7173, 512.9699, 479.5091, 504.8858, 499.7106, 529.4691, 497.5945, 515.6348, 499.8032, 499.2241)
sig2_true <- sig2_true - 100
nu.grid <- c(3,10,Inf)
beta_save <- array(0, dim=c(length(nu.grid)+1,length(beta_true)+length(gamma_true),n.sim))
betasd_save <- array(0, dim=c(length(nu.grid)+1,length(beta_true)+length(gamma_true),n.sim))
beta_coverage <- matrix(0, length(nu.grid)+1, length(beta_true)+length(gamma_true))
phi_save <- array(0, dim=c(length(nu.grid), length(phi_true),n.sim))
phisd_save <- array(0, dim=c(length(nu.grid), length(phi_true),n.sim))
phi_coverage <- matrix(0, length(nu.grid), length(phi_true))
DIC_save <- matrix(0,length(nu.grid)+1,n.sim)
phi_sv_save <- numeric(n.sim)
phisd_sv_save <- numeric(n.sim)
Rho <- matrix(1, nT, nT)
Rho[upper.tri(Rho)] <- 0.7
Rho[lower.tri(Rho)] <- 0.7
half_d <- length(which(lower.tri(Rho)))
Rho_true <- Rho[lower.tri(Rho)]
Rho_coverage <- matrix(0, length(nu.grid)+1, half_d)
init_final <- list(beta = c(beta_true, gamma_true), phi = phi_true, sig2 = sig2_true)
pb <- txtProgressBar(style=3)
idx <- length(nu.grid)+1
for (i.sim in 1:n.sim) {
# dff <- df[[i.sim]]
# groupinfo <- list(c(1,2), c(2,3), c(3), c(1,4))
groupinfo <- list(c(0), c(2))
x <- dff[,6:ncol(dff)]
for (i in 1:length(nu.grid)) {
nu.i <- nu.grid[i]
out <- bayesnmr(dff$y, dff$sd, x, dff$ids, dff$iarm, dff$npt, groupinfo, prior = list(c01=1.0e05, c02=4, nu=nu.i), mcmc=list(ndiscard=2500,nskip=1,nkeep=10000), init = init_final)
beta.est <- rowMeans(out$mcmc.draws$beta)
beta_save[i,,i.sim] <- beta.est
betasd_save[i,,i.sim] <- apply(out$mcmc.draws$beta, 1, sd)
phi.est <- rowMeans(out$mcmc.draws$phi)
phi_save[i,,i.sim] <- phi.est
phisd_save[i,,i.sim] <- apply(out$mcmc.draws$phi, 1, sd)
g <- gof(out)
DIC_save[i,i.sim] <- g$DIC
h <- hpd(out)
beta_lower <- h$beta.hpd[,1]
beta_upper <- h$beta.hpd[,2]
phi_lower <- h$phi.hpd[,1]
phi_upper <- h$phi.hpd[,2]
Rho_lower <- h$Rho.hpd[,1]
Rho_upper <- h$Rho.hpd[,2]
beta_coverage[i,] <- beta_coverage[i,] + (c(beta_true, gamma_true) < beta_upper & c(beta_true, gamma_true) > beta_lower)
phi_coverage[i,] <- phi_coverage[i,] + (phi_true < phi_upper & phi_true > phi_lower)
Rho_coverage[i,] <- Rho_coverage[i,] + (Rho_true < Rho_upper & Rho_true > Rho_lower)
}
out <- bayesnmr(dff$y, dff$sd, x, dff$ids, dff$iarm, dff$npt, list(c(0:3)), prior = list(c01=1.0e05, c02=4, nu=3), mcmc=list(ndiscard=2500,nskip=1,nkeep=10000), init = list(beta = c(beta_true, gamma_true), sig2 = sig2_true))
beta.est <- rowMeans(out$mcmc.draws$beta)
beta_save[idx,,i.sim] <- beta.est
betasd_save[idx,,i.sim] <- apply(out$mcmc.draws$beta, 1, sd)
phi.est <- rowMeans(out$mcmc.draws$phi)
phi_sv_save[i.sim] <- phi.est
phisd_sv_save[i.sim] <- apply(out$mcmc.draws$phi, 1, sd)
g <- gof(out)
DIC_save[idx,i.sim] <- g$DIC
h <- hpd(out)
beta_lower <- h$beta.hpd[,1]
beta_upper <- h$beta.hpd[,2]
phi_lower <- h$phi.hpd[,1]
phi_upper <- h$phi.hpd[,2]
Rho_lower <- h$Rho.hpd[,1]
Rho_upper <- h$Rho.hpd[,2]
beta_coverage[idx,] <- beta_coverage[idx,] + (c(beta_true, gamma_true) < beta_upper & c(beta_true, gamma_true) > beta_lower)
Rho_coverage[idx,] <- Rho_coverage[idx,] + (Rho_true < Rho_upper & Rho_true > Rho_lower)
setTxtProgressBar(pb, i.sim / n.sim)
}
close(pb)
DIC_save
table(dff$ids)
sum(table(dff$ids))
beta1 <- -0.06
beta2 <- 1.40
beta3 <- 1.83
beta4 <- 0.11
beta5 <- -0.81
beta_true <- sapply(1:5, function(i) get(paste0("beta",i)))
gamma0 <- 1.03
gamma1 <- -18.88
gamma2 <- -24.53
gamma3 <- -11.70
gamma_true <- sapply(0:3, function(i) get(paste0("gamma",i)))
beta_true <- c(beta_true, gamma_true)
phi1 <- 1.38
phi2 <- -1.5
phi_true <- sapply(1:2, function(i) get(paste0("phi",i)))
# import the R package results
setwd("C:/Users/dal18007/Desktop/test/sim_res/normal_model")
dir_root <- "C:/Users/dal18007/Desktop/test/sim_res/normal_model/"
fs <- list.files(dir_root)
beta_coverage_total <- matrix(0, 4, 9)
phi_coverage_total <- matrix(0, 3, 2)
Rho_coverage_total <- matrix(0, 4, 6)
DIC_save_total <- matrix(0, 4, 500)
beta_save_total <- array(0, dim = c(4, 9, 500))
betasd_save_total <- array(0, dim = c(4, 9, 500))
phi_save_total <- array(0, dim = c(3, 2, 500))
phi_sv_save_total <- numeric(500) # sv indicating single-variance
phisd_save_total <- array(0, dim = c(3, 2, 500))
phisd_sv_save_total <- numeric(500)
nfiles <- length(fs)
idx <- 0
for (ifiles in 1:nfiles) {
f <- fs[ifiles]
load(paste0(dir_root,f))
nsim <- length(phisd_sv_save)
beta_coverage_total <- beta_coverage_total + beta_coverage
phi_coverage_total <- phi_coverage_total + phi_coverage
Rho_coverage_total <- Rho_coverage_total + Rho_coverage
DIC_save_total[,(idx+1):(idx+nsim)] <- DIC_save
beta_save_total[,,(idx+1):(idx+nsim)] <- beta_save
betasd_save_total[,,(idx+1):(idx+nsim)] <- betasd_save
phi_save_total[,,(idx+1):(idx+nsim)] <- phi_save
phisd_save_total[,,(idx+1):(idx+nsim)] <- phisd_save
phi_sv_save_total[(idx+1):(idx+nsim)] <- phi_sv_save
phisd_sv_save_total[(idx+1):(idx+nsim)] <- phisd_sv_save
idx <- idx + nsim
}
DIC_save_total[c(1,2),] <- DIC_save_total[c(1,2),] + 90 * log(2*pi)
DIC_21 <- DIC_save_total[2,] - DIC_save_total[1,]
DIC_31 <- DIC_save_total[3,] - DIC_save_total[1,]
DIC_41 <- DIC_save_total[4,] - DIC_save_total[1,]
DIC_32 <- DIC_save_total[3,] - DIC_save_total[2,]
DIC_34 <- DIC_save_total[3,] - DIC_save_total[4,]
boxplot(DIC_31, DIC_32, DIC_34, names=c("True v. nu=3", "True v. nu=10", "True v. single-var"))
DIC_save_total[3,]
DIC_save
load("C:/Users/dal18007/Desktop/test/sim_res/normal_model/sim_normal_11_start_1_end_11_2797542_20200413_v4.RData")
DIC_save
setwd("C:/Users/dal18007/Desktop/test")
load("C:/Users/dal18007/Desktop/test/normal_model_data.RData")
rm(list=ls())
## Simulation of Network Meta-Regression
# Load functions
library(BayesMeta)
library(mvnfast)
source("wrapper_normal.R")
simfun(1,1)
View(simfun)
load("C:/Users/dal18007/Desktop/test/sim_normal_1_start_1_end_1_2797542_20200413_v4.RData")
DIC_save
simfun(2,2)
DIC_save
load("C:/Users/dal18007/Desktop/test/sim_normal_1_start_2_end_2_2797542_20200413_v4.RData")
DIC_save
library(BayesMeta)
setwd("C:/Users/dal18007/Desktop/test")
Rscript sim_run.R 1 11 20200413 2797542
